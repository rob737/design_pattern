--- State pattern fundamental.

Whenever the behaviour of an object changes based on the selected option(denoted by state)
then we can leverage state pattern.

e.g. paintbrush tool.
If we select rectangle option then mouse movement will draw rectangle.
If we select circle option then the mouse movement will draw circle.

In above case, based on selected draw option (i.e. rectangle, circle etc), behaviour of mouse
object will change.

Note: Behaviour is basically business use case implementation.

Note: Instead of interface (my solution), alternative was to use abstract class but since we don't have to
provide any common method to all the underlying classes so we didn't use it.

--- State pattern consists of 3 actors :

Context : The entity which supplies the corresponding option for state to decide on the implementation.
i.e. Context is the class which has exposed method for client program, which in turn delegates the option object
to State.
State : Abstract class that uses polymorphism to decide on concrete implementation class.
Concrete Classes that extends State : Concrete implementation class defining the exact business logic.


Note: Using State pattern, we also demonstrated Open Closed principle in SOLID.
(Open for extension and closed for modification)

***** Very Important *****

Don't abuse the patterns i.e. evey design pattern is for a particular type of scenario.
If that scenario comes up then only use the pattern else don't over complicate things.
(called as design smell).

**** Real world use case ****

1. Any context driven architecture like Nirog money use case.
2. Market driven interest rate calculation i.e. if market code is X then do this etc.

Note : If the option is boolean or fixed to a small number then you are better off without pattern.