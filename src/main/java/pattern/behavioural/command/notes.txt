--- why is it used?
It's a very common and useful pattern used in the scenarios like below :

Imagine a scenario where in we are designing a GUI framework.
There is a Button class in it.
Button class has a method called click() whose behaviour depends on the place where
it was clicked from.
e.g. if it is clicked via delete icon then click() should perform delete.
     if it is clicked via update icon then click() should update etc.
Basically, same option different behaviour.
More or less like how we pass reference in javascript as callback to events.

--- Doubt :
Is it like strategy pattern?
No, because in strategy pattern underlying behaviour was same like encrypt()
but the implementation may vary.
In command, underlying behaviour may also be different like delete, update etc for the same option.

---- Structure :
Invoker/Sender :
Command (interface) :
Concrete Command implementation :
Receiver :

Note:
I think any event driven behaviour can be designed using command pattern.
e.g. click, submit, view etc.

Note : we can also use command pattern to implement undo mechanism instead of memento pattern
    as memento pattern stores the complete state which would be very costly to store.
    e.g. undo video encoding etc.

Note : interface can only extend other interface and not implement it which makes sense.

/*
* Note : If we are using abstract class then there is no need to
* implement all methods of the interface which makes sense.
* */

Note: We can implement undo functionality using command pattern by storing commands in history.
This gives a better benefit over memento because we were storing whole state in history which would
be waste of memory in case of larger states.
e.g. we would need to store whole VideoEditor in history in memento pattern but here we have
   used only command object storing only the change done.