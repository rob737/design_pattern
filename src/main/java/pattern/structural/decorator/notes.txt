--- why is it used?

It is a very powerful and useful design pattern that can be used to add operations to an object
at runtime by wrapping it in one or more decorator classes (e.g.
CloudStream is wrapped up inside EncryptedCloudStream etc.
).
It provides an alternative to subclassing for extending the behavior of an object at runtime.

e.g. let's say we have to store data to cloud,
there can be certain situations in it.

1. Store data in plain text.
2. Store data in encrypted format.
3. Store data after compressing it.
4. Store data in combination of encryption and compression.

One naive approach is to create subclasses for each of the requirements but that
could quickly become unmaintainable.

Decorator pattern can be leveraged in above situations to add operations at runtime
to single concrete class instead of creating new classes for each use case.

--- Doubt :
Can't we use visitor pattern for this use case?
Answer : No, that is behaviour pattern where in we have assumed that structure is already properly created.
But the one that we are dealing with here is structural pattern itself.

--- Structure :

Component (Interface) : operation method
Concrete Component : implementing the Component interface
Decorator : Using Composition, call Interface Component's operation method.

This pattern is basically useful when we have to reuse existing method but with different types of input
or we need to execute a set of operations like list of middlewares.

--- Real world use case :

1. Logger : Logger input can be decorated to log different objects.
2. KYC validation : validation can be the re-usable concrete component that can be decorated with
    different type of inputs.
3. Middleware in frameworks.


Note : LSP (Liskov's Substitution Principle) basically states that subclasses should not tamper with
implementation of overridden methods and must leave it as it is.
This is to ensure that methods present in super class behaves in the same way irrespective of the fact that
it was called from super class or sub class.

e.g. Rectangle is a super class with method setWidth() , if we create a sub class of it say Square
and override setWidth() method and change it's implementation then it violates LSP.

Ideally, we should not override in this case as we are not reusing super class' method anyways.

Extension, Not Modification: Overriding methods should extend or
specialize the behavior of the superclass method, not fundamentally change it.
If the subclass method changes the behavior in a way that
contradicts the expected behavior of the superclass method, it violates LSP.