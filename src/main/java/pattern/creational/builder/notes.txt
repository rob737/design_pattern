--- why is it used?
To separate the construction of an object from it's representation i.e.
it will create the object and how those objects are being used is dependent on the use case.

e.g. let's say you want to export your powerpoint presentation in different formats.
for each export type, you would need to create objects and do some repetitive work.

In this use case, construction of an object is basically constructing export object
e.g. { for (Slide slide : slides) pdfDocument.addPage(slide.getText()); }

and representation is basically specific format of export i.e. whether it's PDF or movie etc.

So, the aim of builder interface is to separate construction and representation by providing
a common interface for integrating separate representations(components) for a particular use case.

In general terms, construction is assembling of computer components (separate interface)
while representation is different components with different intrinsic properties.


---- Structure :

(e.g. Presentation class)
Director class ----------------------> Builder interface (e.g. PresentationBuilder interface)
+construct()                            +buildPart()
                                             ^
                                             |
                                             |
                                             |
                                        ConcreteBuilder (e.g. PdfDocumentBuilder)
                                          +buildPart()
                                          +getResult()

Note : It is basically separating integration from individual construction.
construct() method is for integration.
ConcreteBuilder's buildPart() method is for individual object creation.

--- Real world use case :

1. String builder
2. URL builder

3. Order and adding to cart so cart is the integration and order is the individual component.

Note : The Builder pattern is particularly useful in scenarios where the creation of an object
       involves multiple steps or configuration options.

Builder can be leveraged in scenarios where different types of configurations (objects) are created
based on the dynamic requirement.
e.g. consider a build pipeline for staging environment, here you need to have object for unit test, seeder, migration etc.
Now, if we need to have pipeline for production environment, then we can have objects created for different activities
like unit test, coverage test, vulnerability test etc.

So, we are creating objects as per the configuration and then integrating it at runtime.

To sum up, there are basically 3 actors.

1. Prototype
2. Individual components
3. Assembler

Assembler is supplied with individual components and a prototype.
Based on the prototype, corresponding component's property would be leveraged to create something
and finally assembled into a desired result.