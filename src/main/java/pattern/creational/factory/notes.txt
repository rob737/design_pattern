--- why is it used?
To defer the creation of object to subclasses.
This would be leveraged in use cases where we need to provide a common library that will be used
for different use cases like db driver library can be used for postgres, mysql etc connections.

--- Structure :

Creator (Abstract class/Normal class) : operation() (e.g. schedule()) and factoryMethod() (e.g. getCalendar()),
                           operation() calls factoryMethod().
ConcreteCreator : factoryMethod() : It has the actual implementation for creating objects.



Note: We cannot override static methods in Java.
Factory design pattern basically uses inheritance and polymorphism to provide elegant solution.


Real world use case :

1. Creating a new web framework like Spring/Django/Express etc.
2. Creating Driver classes.
3. Since, basically the work of factory pattern is to delegate object creation to subclasses at runtime,
  it can be used for dependency injection as well.