--- why is it used?

It provides an interface for creating families of related objects.

Example : let's say we want to apply a filter to all components within a widget then
all components are a family of widget(related object) and one of the filter
would be applied to whole family.

So, one family is basically combination of filter and components.
same components can be applied a different filter and it will be treated as different family.

Basically, the use case is when you have to apply some operation to a list of components.
we can leverage abstract factory pattern.


NOTE ::::::::: Abstract factory is not related to factory method design pattern. :::::::::

NOTE :: In Java, an interface can't implement other interface, it can only extend it.


---- Structure :

We have two components : factory methods for creating family and abstract factory (interface)
                         providing those methods.

 AbstractFactory (Interface) (e.g. WidgetFactory Interface) :
 contains factory methods like createComponentOne() (e.g. createButton()),
 createComponentTwo() (e.g. createTextBox()) etc.

 ConcreteFactory classes : Count depends on the number of families that needs to be created.
 e.g. MaterialWidgetFactory is a concrete class that creates a family of material objects i.e.
 material theme operation performed on a group of components.

 Note: one family is basically operation + components.


 --- Real world use case :

 1. Create beans in Spring e.g. common operation is annotation applied and components are
    wherever it is applied.

 2. Connection pooling

 3. Sending something to different downstream.

 4. Payment gateway : e.g. pay() is the operation and components are Gpay, PhonePe etc.